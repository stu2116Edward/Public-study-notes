user root;
daemon off;
# 绑定cpu亲核性，减少cache未命中，请根据实际情况修改
worker_processes 1;
worker_cpu_affinity 1;
# 日志输出到标准输出
error_log /dev/stdout;
events {
    # 设置单个worker连接数
    worker_connections 10240;
    use epoll;
}

http {
    # 增加哈希桶大小，解决server_name哈希表构建失败问题
    server_names_hash_bucket_size 64;  # 添加这一行
    # 配置名为access的log输出格式
    log_format access '$remote_addr $server_port - $http_host [$time_local] '
                      '"$request" $status $body_bytes_sent '
                      '"$http_referer" "$http_user_agent" '
                      '$http_x_forwarded_for|$http_x_real_ip|$limit_key';
    # log日志输出到标准输出
    # access_log /dev/stdout access;
    # 关闭日志，提高性能。开启日志，排查问题
    access_log off;

    # 白名单不限速
    geo $limit {
        default 1;
        192.168.0.0/24 0;
        10.0.0.0/8 0;
        127.0.0.0/8 0;
    }

    # Header有X-Forwarded-IP就用xff，没有就用数据包的源IP
    map $http_x_forwarded_for $real_ip {
        default         $remote_addr;
        "~^(?P<ip>[^,]+)" $ip;
    }

    # 匹配到白名单就为空不限速，没匹配到就限速
    map $limit $limit_key {
        0 "";
        1 $real_ip;
    }

    geo $whitelist {
        default 0;
        1.1.1.0/24 1;  # cdn的ip访问白名单
    }

    # 请求超过阈值，断开连接
    limit_req_status 444;
    # 限制单个ip的请求数，避免单个ip打爆服务，请根据实际业务进行修改
    limit_req_zone $limit_key   zone=req_ip:10m   rate=5r/s;
    # 限制单个服务的请求数，避免请求过载打爆服务，请根据实际业务进行修改
    limit_req_zone $server_name zone=req_svr:1m   rate=1000r/s;
    # 限制单个uri的请求数，避免带宽被打爆，请根据实际业务进行修改
    limit_req_zone $uri         zone=req_res:10m  rate=3r/s;
    # 连接数超过阈值，断开连接
    limit_conn_status 444;
    # 限制单个ip的连接数
    limit_conn_zone $limit_key zone=con_ip:10m;
    # 限速的共享内存，如果不够可以改大
    lua_shared_dict traffic_stats 50m;
    # IP归属地信息的共享内存
    lua_shared_dict ip_location_stats 30m;
    # 引入lua模块
    lua_package_path "/app/?.lua;;";
    
    # 初始化工作进程，启动后台定时器
    init_worker_by_lua_block {
        -- 防止多个worker进程重复启动定时器
        if ngx.worker.id() ~= 0 then
            return
        end
        
        -- 后台IP归属地获取功能
        local function fetch_ip_location_background(premature)
            if premature then
                return
            end
            
            local dict = ngx.shared.traffic_stats
            local location_dict = ngx.shared.ip_location_stats
            
            if not dict or not location_dict then
                ngx.log(ngx.ERR, "Shared dictionaries not available")
                return
            end
            
            local keys = dict:get_keys(0)
            local ip_list = {}
            
            -- 收集过去1小时内活跃的IP
            for _, key in ipairs(keys) do
                if key:find("^last:hour:") then
                    local ip = key:sub(11) -- 去掉 "last:hour:" 前缀
                    if ip and ip ~= "" then
                        -- 检查是否已有归属地信息
                        local existing_location = location_dict:get(ip)
                        if not existing_location then
                            table.insert(ip_list, ip)
                        end
                    end
                end
            end
            
            -- 限制每次处理的IP数量，避免过度请求
            local max_ips_per_batch = 5
            local processed = 0
            
            for _, ip in ipairs(ip_list) do
                if processed >= max_ips_per_batch then
                    break
                end
                
                -- 发起HTTP请求获取IP归属地
                local httpc = require "resty.http"
                local client = httpc.new()
                client:set_timeout(5000) -- 5秒超时
                
                local res, err = client:request_uri("https://api.vore.top/api/IPdata?ip=" .. ip, {
                    method = "GET",
                    headers = {
                        ["User-Agent"] = "nginx-lua-background"
                    }
                })
                
                if res and res.status == 200 and res.body then
                    local cjson = require "cjson"
                    local ok, data = pcall(cjson.decode, res.body)
                    
                    if ok and data and data.ipdata and data.ipdata.info1 then
                        local location = data.ipdata.info1
                        if data.ipdata.info2 and data.ipdata.info2 ~= "" then
                            location = location .. " " .. data.ipdata.info2
                        end
                        if data.ipdata.info3 and data.ipdata.info3 ~= "" then
                            location = location .. " " .. data.ipdata.info3
                        end
                        
                        -- 保存到共享字典，永久缓存
                        location_dict:set(ip, location:gsub("^%s*(.-)%s*$", "%1"))
                        ngx.log(ngx.INFO, "Background fetched location for IP: " .. ip .. " -> " .. location)
                    else
                        -- 查询失败，记录为查询失败
                        location_dict:set(ip, "查询失败")
                    end
                else
                    ngx.log(ngx.WARN, "Failed to fetch location for IP: " .. ip .. ", error: " .. (err or "unknown"))
                    location_dict:set(ip, "查询失败")
                end
                
                processed = processed + 1
                
                -- 每个IP查询之间间隔2秒，避免频繁请求
                if processed < max_ips_per_batch and processed < #ip_list then
                    ngx.sleep(2)
                end
            end
            
            -- 重新设置定时器，每30秒执行一次
            local ok, err = ngx.timer.at(30, fetch_ip_location_background)
            if not ok then
                ngx.log(ngx.ERR, "Failed to create timer: " .. err)
            end
        end
        
        -- 启动后台定时器
        local ok, err = ngx.timer.at(10, fetch_ip_location_background) -- 10秒后开始第一次执行
        if not ok then
            ngx.log(ngx.ERR, "Failed to create initial timer: " .. err)
        else
            ngx.log(ngx.INFO, "Background IP location fetcher started")
        end
    }
    server {
        # 设置dns解析
        resolver 8.8.8.8 ipv6=off;
        # 监听80和443端口
        listen 80;
        listen 443 ssl;
        # 关闭文件索引，避免文件结构泄漏
        autoindex off;
        # 设置静态文件的目录
        root /www;
        # 开启OCSP装订，加速TLS握手效率
        ssl_stapling off;
        ssl_stapling_verify off;
        # 配置ssl证书和密钥
        ssl_certificate /app/cert.crt;
        ssl_certificate_key /app/private.key;
        # SSL会话有效期
        ssl_session_timeout 5m;
        # 使用SSL版本，加密算法
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;
        ssl_prefer_server_ciphers on;
        # 开启HSTS，强制用户浏览器使用https协议
        add_header Strict-Transport-Security "max-age=2592000";

        # 开启gzip压缩，配置压缩文件类型，压缩等级，最小压缩长度，关闭IE浏览器压缩
        gzip on;
        gzip_types *;
        gzip_comp_level 6;
        gzip_min_length 256;
        gzip_buffers 16 8k;
        gzip_proxied any;
        gzip_vary on;
        gzip_disable "MSIE [1-6]\.(?!.*SV1)";

        # 配置匹配的域名 (重要，必须修改)
        server_name www.example.com;

        # 限制下行带宽
        limit_rate 100k;
        limit_rate_after 1m;

        # 限制连接数
        limit_conn con_ip 40;

        # 检查客户浏览器端是否断开连接
        lua_check_client_abort on;

        # 引入限速配置文件
        include /app/env.conf;

        # 开启CDN源IP访问白名单
        # deny all;
        # allow $whitelist;

        # --- 添加以下两行来记录请求开始时间 ---
        access_by_lua_block {
            ngx.ctx.start_clock = os.clock()
        }
        # ---------------------------------------

        # 如果后段服务为http服务，请保留这一段，并修改后段服务地址
        location / {

            # 对单个ip进行限速，请根据实际业务进行修改
            limit_req zone=req_ip burst=100 delay=200;
            # 对整个服务进行限速，请根据实际业务进行修改
            limit_req zone=req_svr burst=1000 delay=2000;
            # 向后端传递host名
            proxy_set_header Host $host;
            # 对请求IP进行限速处理
            access_by_lua_file /app/protect.lua;
            # # 对请求IP流量进行统计
            # log_by_lua_file /app/record.lua;
            # 调试使用
            # lua_code_cache off;
            # access_by_lua_file /app/protect.lua;
            # log_by_lua_file /app/record.lua;
            # 如果是纯静态网站，请保留index，并删除proxy_pass。
            # index index.php index.html index.htm;
            # 后段服务地址，请 根据实际情况修改
            proxy_pass http://127.0.0.1:8090;

            # 对请求IP流量进行统计 一定要放在最后 否则统计不准确
            log_by_lua_file /app/record.lua;
        }

        # 后段服务为php-fpm。请保留这一段，否则删除
        # location / {
        #     # 对单个ip进行限速，请根据实际业务进行修改
        #     limit_req zone=req_ip burst=100 delay=200;
        #     # 对整个服务进行限速，请根据实际业务进行修改
        #     limit_req zone=req_svr burst=1000 delay=2000;
        #     # 向后端传递host名
        #     proxy_set_header Host $host;
        #     # 对请求IP进行限速处理
        #     access_by_lua_file /app/protect.lua;
        #     # 对请求IP流量进行统计
        #     log_by_lua_file /app/record.lua;
        #     # 调试使用
        #     # lua_code_cache off;
        #     # access_by_lua_file /app/protect.lua;
        #     # log_by_lua_file /app/record.lua;
        #     # 逐个匹配php、html、htm
        #     index index.php index.html index.htm;
        # }

        # 后段服务为php-fpm。请保留这一段，否则删除
        # location ~ \.php$ {
        #     # 对单个ip进行限速，请根据实际业务进行修改
        #     limit_req zone=req_ip burst=100 delay=200;
        #     # 对整个服务进行限速，请根据实际业务进行修改
        #     limit_req zone=req_svr burst=1000 delay=2000;
        #     # 向后端传递host名
        #     proxy_set_header Host $host;
        #     # 对请求IP进行限速处理
        #     access_by_lua_file /app/protect.lua;
        #     # 对请求IP流量进行统计
        #     log_by_lua_file /app/record.lua;
        #     # 调试使用
        #     # lua_code_cache off;
        #     # access_by_lua_file /app/protect.lua;
        #     # log_by_lua_file /app/record.lua;
        #     # php-fpm的地址，请 根据实际情况修改
        #     fastcgi_pass   127.0.0.1:9000;
        #     fastcgi_index  index.php;
        #     fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
        #     include        fastcgi_params;
        # }

        # 查看ip的统计信息
        location /dk8s.stats {
            # 对单个ip进行限速
            limit_req zone=req_ip burst=100 delay=200;
            # 对整个服务进行限速
            limit_req zone=req_svr burst=1000 delay=2000;
            # lua_code_cache off;
            # access_by_lua_file /app/protect.lua;
            # log_by_lua_file /app/record.lua;
            access_by_lua_file /app/protect.lua;
            content_by_lua_block {
                if ngx.var.arg_type == "save_location" then
                    local ip = ngx.var.arg_ip
                    local location = ngx.unescape_uri(ngx.var.arg_location)
                    if ip and location then
                        local dict = ngx.shared.ip_location_stats
                        dict:set(ip, location)
                        ngx.status = 200
                        ngx.say("OK")
                        return
                    end
                    ngx.status = 400
                    ngx.say("Bad Request")
                    return
                end
                ngx.exec("@stats_page")
            }
            log_by_lua_file /app/record.lua;
        }

        location @stats_page {
            content_by_lua_file /app/stats.lua;
        }

        # 图片资源等信息，用作配置浏览器缓存。请修改后段服务地址，或删除proxy_pass，并把图片存到/www/所在位置
        location ~* \.(jpg|png|jpeg)$ {
            # 对单个ip进行限速
            limit_req zone=req_ip burst=100 delay=200;
            # 对整个服务进行限速
            limit_req zone=req_svr burst=1000 delay=2000;
            # 对uri进行限速，防止刷单个资源，导致带宽被打爆
            limit_req zone=req_res burst=200 delay=1000;
            # lua_code_cache off;
            # access_by_lua_file /app/protect.lua;
            # log_by_lua_file /app/record.lua;
            # 设置浏览器资源过期时间
            expires 7d;
            proxy_set_header Host $host;
            access_by_lua_file /app/protect.lua;
            # log_by_lua_file /app/record.lua;
            # 后段服务地址，请 根据实际情况修改。如果资源存在/www/所在的位置，请删除proxy_pass
            proxy_pass http://127.0.0.1:8090;

            # 对请求IP流量进行统计 一定要放在最后 否则统计不准确
            log_by_lua_file /app/record.lua;
        }

        # 样式资源等信息，用作配置浏览器缓存。请修改后段服务地址，或删除proxy_pass，并把js，css存到/www/所在位置
        location ~* \.(js|css|svg|woff|woff2)$ {
            # 对单个ip进行限速
            limit_req zone=req_ip burst=100 delay=200;
            # 对整个服务进行限速
            limit_req zone=req_svr burst=1000 delay=2000;
            # 对uri进行限速，防止刷单个资源，导致带宽被打爆
            limit_req zone=req_res burst=200 delay=1000;
            # lua_code_cache off;
            # access_by_lua_file /app/protect.lua;
            # log_by_lua_file /app/record.lua;
            # 设置浏览器资源过期时间
            expires 1d;
            # 向后端传递host名
            proxy_set_header Host $host;
            # 让浏览器每次请求检查资源是否过期
            add_header Cache-Control no-cache;
            access_by_lua_file /app/protect.lua;
            # log_by_lua_file /app/record.lua;
            # 后段服务地址，请 根据实际情况修改。如果资源存在/www/所在的位置，请删除proxy_pass
            proxy_pass http://127.0.0.1:8090;

            # 对请求IP流量进行统计 一定要放在最后 否则统计不准确
            log_by_lua_file /app/record.lua;
        }

        error_page 429 @429;
        location @429 {
            return 429 "error";
        }

        # location /control_group {
        #     # 测速的对照组，生产环境请删除
        #     proxy_set_header Host $host;
        #     proxy_pass http://127.0.0.1:3000;
        #     access_by_lua_block {
        #         ngx.exit(429)
        #     }
        #     log_by_lua_block {
        #         local a=0;
        #     }
        # }
    }

    server {
        # 未匹配的域名，断开连接，防止源站被扫描
        listen 80;
        listen 443 ssl;
        ssl_reject_handshake on;
        return 444;
    }
}
